{"version":3,"sources":["../src/index.ts","../src/format/fromString.ts","../src/format/asString.ts","../src/format/index.ts"],"sourcesContent":["import { fromString, asString } from \"./format\"\r\n\r\ndeclare global {\r\n  interface DateConstructor {\r\n    fromString: (str: string, mask: string) => Date | null\r\n  }\r\n\r\n  interface Date {\r\n    asString: (mask: string) => String\r\n  }\r\n}\r\n\r\nDate.fromString = fromString\r\nDate.prototype.asString = function(mask) { return asString(this, mask)}\r\n\r\nexport { fromString as dateFromString, asString as dateAsString }","import { regex, IDateTime, daysOfTheWeek, monthsOfTheYear } from \".\"\r\n\r\nconst fromString = (str: string, mask: string) => {  \r\n  const formattedMask = Object.entries(regex)\r\n    .map(([k, v]) => [k, v.exec(mask)]) //get values from mask and regex\r\n    .reduce((arr, [key, value]) => {\r\n      const k = key as keyof IDateTime<any>\r\n      const v = value as RegExpExecArray | null\r\n\r\n      if(v){\r\n        switch (k){\r\n          case \"year\": return arr.replace(regex.year, '(?<year>\\\\d{2,4})');\r\n          case \"month\": return arr.replace(regex.month, '(?<month>\\\\d{1,2})');\r\n          case \"shortMonth\": return arr.replace(regex.shortMonth, '(?<shortMonth>[A-Za-z]{3})');\r\n          case \"longMonth\": return arr.replace(regex.longMonth, '(?<longMonth>[A-Za-z]+)');\r\n          case \"date\": return arr.replace(regex.date, '(?<date>\\\\d{1,2})');\r\n          case \"shortDay\": return arr.replace(regex.shortDay, '(?<shortDay>[A-Za-z]{3})');\r\n          case \"longDay\": return arr.replace(regex.shortDay, '(?<longDay>[A-Za-z]+)');\r\n          case \"hour\": return arr.replace(regex.hour, '(?<hour>\\\\d{2})');\r\n          case \"minute\": return arr.replace(regex.minute, '(?<minute>\\\\d{2})');\r\n          case \"second\": return arr.replace(regex.second, '(?<second>\\\\d{2})');\r\n          case \"millisecond\": return arr.replace(regex.millisecond, '(?<millisecond>\\\\d{3})');\r\n        }        \r\n      } else return arr\r\n    }, mask)\r\n\r\n  const matches = str.match(new RegExp(formattedMask))\r\n\r\n  if(matches){\r\n    return new Date(\r\n      Number(matches.groups?.year ?? 0),\r\n      matches?.groups?.month ? Number(matches.groups.month) - 1 :\r\n        matches?.groups?.shortMonth ? monthsOfTheYear.findIndex((e) => e.substring(0, 3) === matches.groups?.shortMonth) :\r\n          matches?.groups?.longMonth ? monthsOfTheYear.findIndex((e) => e === matches.groups?.longMonth) : 0,\r\n      Number(matches.groups?.date ?? 0),\r\n      Number(matches.groups?.hour ?? 0),\r\n      Number(matches.groups?.minute ?? 0),\r\n      Number(matches.groups?.second ?? 0),\r\n      Number(matches.groups?.millisecond ?? 0)\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default fromString","import { regex, IDateTime, daysOfTheWeek, monthsOfTheYear } from \".\"\r\n\r\nconst asString = (date: Date, mask: string) => {\r\n  return Object.entries(regex)\r\n    .map(([k, v]) => [k, v.exec(mask)]) //get values from mask and regex\r\n    .reduce((arr, [key, val]) => {\r\n      const k = key as keyof IDateTime<any>\r\n      const v = val as RegExpExecArray | null\r\n\r\n      if(v){\r\n        const s = v.index\r\n        const e = v.index + v[0].length\r\n\r\n        switch(k){\r\n          case \"year\":\r\n            return arr.replace(regex.year, date.getFullYear().toString().slice((v[0] == '%y' ? 2 : 4)*-1));\r\n          case \"month\":\r\n            return arr.replace(regex.month, (date.getMonth() + 1).toString().padStart(v[0].length, '0'));\r\n          case \"shortMonth\":\r\n            return arr.replace(regex.shortMonth, monthsOfTheYear[date.getMonth()].substring(0, 3));\r\n          case \"longMonth\":\r\n            return arr.replace(regex.longMonth, monthsOfTheYear[date.getMonth()]);\r\n          case \"date\":\r\n            return arr.replace(regex.date, date.getDate().toString().padStart(v[0].length, '0'));\r\n          case \"shortDay\":\r\n            return arr.replace(regex.shortDay, daysOfTheWeek[date.getDay()].substring(0, 3));\r\n          case \"longDay\":\r\n            return arr.replace(regex.longDay, daysOfTheWeek[date.getDay()]);\r\n          case \"hour\":\r\n            return arr.replace(regex.hour, date.getHours().toString().padStart(v[0].length, '0'));\r\n          case \"minute\":\r\n            return arr.replace(regex.minute, date.getMinutes().toString().padStart(v[0].length, '0'));\r\n          case \"second\":\r\n            return arr.replace(regex.second, date.getSeconds().toString().padStart(v[0].length, '0'));\r\n          case \"millisecond\":\r\n            return arr.replace(regex.millisecond, date.getMilliseconds().toString().padStart(v[0].length, '0'));\r\n        }\r\n\r\n      } else {\r\n        return arr        \r\n      }\r\n    }, mask)\r\n}\r\n\r\nexport default asString","//https://docs.rs/chrono/latest/chrono/format/strftime/index.html\r\n\r\nexport interface IDateTime<T> {\r\n  year: T,\r\n  month: T,\r\n  shortMonth: T,\r\n  longMonth: T\r\n  date: T,\r\n  shortDay: T,\r\n  longDay: T\r\n  hour: T,\r\n  minute: T,\r\n  second: T,\r\n  millisecond: T\r\n}\r\n\r\nexport const regex = {\r\n  year: /%(Y|y)/,\r\n  month: /%m/,\r\n  shortMonth: /%(b|h)/,\r\n  longMonth: /%B/,\r\n  date: /%d/,\r\n  shortDay: /%a/,\r\n  longDay: /%A/,\r\n  hour: /%H/,\r\n  minute: /%M/,\r\n  second: /%S/,\r\n  millisecond: /%f/\r\n} as IDateTime<RegExp>\r\n\r\nexport const maskHelper = {\r\n  HourMinute: \"%H:%M\",\r\n  HourMinuteSecond: \"%H:%M%S\",\r\n  DayMonthYear: \"%d/%m/%y\",\r\n  YearMonthDay: \"%Y-%m-%d\"\r\n}\r\n\r\nexport const daysOfTheWeek = [\r\n  \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n]\r\n\r\nexport const monthsOfTheYear = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\"\r\n]\r\n\r\nexport { default as fromString } from './fromString'\r\nexport { default as asString } from './asString'"],"mappings":"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","names":["_a","daysOfTheWeek","daysOfTheWeek"]}